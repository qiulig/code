package leetcode.Arrays.动态规划;

/**
 * https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/
 *123. 买卖股票的最佳时机 III
 * 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
 *
 * 设计一个算法来计算你所能获取的最大利润。你最多可以完成?两笔?交易。
 *
 * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 */
class Main_123 {
    public static void main(String[] args) {
        int prices[] = {3,3,5,0,0,3,1,4};
        System.out.println(maxProfit(prices));
    }
    public static int maxProfit(int[] prices) {
       int len = prices.length;
       //只进行过一次买操作；
       int buy1 = -prices[0];
       //进行了一次买操作和一次卖操作，即完成了一笔交易；
       int sell1 = 0;
       //在完成了一笔交易的前提下，进行了第二次买操作；
       int buy2 = -prices[0];
       //完成了全部两笔交易。
       int sell2 = 0;
       for(int i =1;i<len;i++){
           //(昨天持有--今天不进行操作，买入)
           buy1 = Math.max(buy1,-prices[i]);
           //(昨天不持有，今天持有--今日卖出)
           sell1 = Math.max(sell1,buy1+prices[i]);
           //(昨天持有，昨天不持有，今天买入)
           buy2 = Math.max(buy2,sell1-prices[i]);
           //(昨天卖出，今天卖出)
           sell2 = Math.max(sell2,buy2+prices[i]);
       }
       return sell2;
    }
}
